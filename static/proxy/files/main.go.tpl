package main

/*
	Code generated by
	grpc-wiremock grpc to http proxy generator.
*/

import (
	"context"
	"fmt"
	"log"
	"net"
	"os"

	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_zap "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
	"grpc-proxy/internal/health"
	"grpc-proxy/pkg/getenv"
	pb_health "grpc-proxy/pkg/gitlab.sbmt.io/paas/health"

	{{ range .OriginalGoPackagesWithService -}}
	"grpc-proxy/internal/{{ . }}"
	{{ end }}
	{{ range .GoPackages }}
	pb_{{ . | ToPackageName }} "{{ . }}"
	{{- end }}
)

func main() {
	ctx := context.Background()
	address := fmt.Sprintf(":%s", getenv.GetPort())

	if err := Run(ctx, address); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

func Run(ctx context.Context, address string) error {
	logger := getLogger()
	logger.Info(fmt.Sprintf("Starting listening on %s", address))

	listener, err := net.Listen("tcp", address)
	if err != nil {
		return err
	}
	defer func() {
		if err = listener.Close(); err != nil {
			logger.Info(fmt.Sprintf("Failed to close server: %s, %s", address, err.Error()))
		}
	}()

	logger.Info(fmt.Sprintf("Listening on %s", address))

	logUnaryInterceptor := grpc.UnaryInterceptor(
		grpc_middleware.ChainUnaryServer(
			grpc_zap.UnaryServerInterceptor(logger),
		),
	)

	server := grpc.NewServer(logUnaryInterceptor)
	{{ range .PackageToServices }}
	pb_{{ .ProtoPackage }}.Register{{ .Service }}Server(server, {{ .ServicePackage }}.NewService())
	{{- end }}

	reflection.Register(server)
	pb_health.RegisterHealthServer(server, health.NewService())

	go func() {
		defer server.GracefulStop()
		<-ctx.Done()
	}()

	return server.Serve(listener)
}

func getLogger() *zap.Logger {
	encoderCfg := zapcore.EncoderConfig{
		MessageKey:  "msg",
		LevelKey:    "level",
		EncodeLevel: zapcore.CapitalLevelEncoder,
	}

	core := zapcore.NewCore(
		zapcore.NewConsoleEncoder(encoderCfg),
		os.Stdout,
		zap.DebugLevel,
	)

	return zap.New(core)
}
